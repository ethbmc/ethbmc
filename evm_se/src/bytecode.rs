#[derive(Clone, Debug, PartialEq, Eq)]
pub enum Instr {
    IStop,
    IAdd,
    IMul,
    ISub,
    IDiv,
    ISDiv,
    IMod,
    ISMod,
    IAddMod,
    IMulMod,
    IExp,
    ISext, // SIGNEXTEND
    ILt,
    IGt,
    ISLt,
    ISGt,
    IEql,
    IIsZero,
    IAnd,
    IOr,
    IXor,
    INot,
    IByte,
    IShl,
    IAShr,
    ILShr,
    ISHA3,
    IAddr,
    IBalance,
    IOrigin,
    ICaller,
    ICallValue,
    ICallDataLoad,
    ICallDataSize,
    ICallDataCopy,
    ICodeSize,
    ICodeCopy,
    IGasPrice,
    IExtCodeSize,
    IExtCodeCopy,
    IRDataSize,
    IRDataCopy,
    IBlockHash,
    ICoinBase,
    ITimeStamp,
    INumber,
    IDifficulty,
    IGasLimit,
    IPop,
    IMLoad,
    IMStore,
    IMStore8,
    ISLoad,
    ISStore,
    IJump,
    IJumpIf,
    IPC,
    IMSize,
    IGas,
    IJumpDest,
    IPush(Vec<u8>),
    IDup(usize),
    ISwap(usize),
    ILog(usize),
    ICreate,
    ICall,
    ICallCode,
    IReturn,
    IDelegateCall,
    ICreate2,
    IRevert,
    IStaticCall,
    ISelfDestruct,
    IInvalid,
}

impl Instr {
    pub fn size(&self) -> usize {
        match self {
            Instr::IPush(ref a) => a.len() + 1,
            _ => 1,
        }
    }
}
